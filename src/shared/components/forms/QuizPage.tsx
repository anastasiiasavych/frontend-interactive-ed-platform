import React, { useState, useEffect } from 'react';
import { useNavigate, Link, useLocation } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  FiHome, 
  FiBook, 
  FiTrendingUp, 
  FiUser, 
  FiChevronLeft, 
  FiChevronRight, 
  FiCheck, 
  FiSearch, 
  FiArrowRight,
  FiFilter,
  FiX,
  FiAlertCircle,
  FiAward,
  FiClock,
  FiPlay,
  FiAlertTriangle,
  FiMenu,
  FiChevronRight as FiChevronRightIcon,
  FiChevronLeft as FiChevronLeftIcon
} from 'react-icons/fi';
import '../../styles/QuizPage.css';
const CATEGORIES = [
  { id: 'all', name: '–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó' },
  { id: 'fire-safety', name: '–ü–æ–∂–µ–∂–Ω–∞ –±–µ–∑–ø–µ–∫–∞' },
  { id: 'water-safety', name: '–ë–µ–∑–ø–µ–∫–∞ –Ω–∞ –≤–æ–¥—ñ' },
  { id: 'home-safety', name: '–ë–µ–∑–ø–µ–∫–∞ –≤ –ø–æ–±—É—Ç—ñ' },
  { id: 'firstAid', name: '–ü–µ—Ä—à–∞ –¥–æ–ø–æ–º–æ–≥–∞' },
  { id: 'cyber', name: '–ö—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∞' },
];
export const QUIZZES = [
  {
    id: 'firstAid',
    name: '–ü–µ—Ä—à–∞ –¥–æ–ø–æ–º–æ–≥–∞',
    category: 'firstAid',
    color: '#10b981',
    icon: 'ü©π',
    description: '–û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞–¥–∞–Ω–Ω—è –ø–µ—Ä—à–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ —É —Ä—ñ–∑–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è—Ö, —è–∫—ñ –º–æ–∂—É—Ç—å –≤—Ä—è—Ç—É–≤–∞—Ç–∏ –∂–∏—Ç—Ç—è',
    questionsCount: 10,
    difficulty: '–°–µ—Ä–µ–¥–Ω—ñ–π',
    time: 15,
    questions: [
      { question: '–©–æ —Ä–æ–±–∏—Ç–∏ –ø—Ä–∏ –æ–ø—ñ–∫–∞—Ö?', options: ['–ü–æ–ª–∏—Ç–∏ —Ö–æ–ª–æ–¥–Ω–æ—é –≤–æ–¥–æ—é', '–ù–∞–º–∞–∑–∞—Ç–∏ –æ–ª—ñ—î—é', '–ü—Ä–æ–∫–æ–ª–æ—Ç–∏ –ø—É—Ö–∏—Ä—ñ'], correct: 0 },
      { question: '–Ø–∫ –Ω–∞–¥–∞—Ç–∏ –ø–µ—Ä—à—É –¥–æ–ø–æ–º–æ–≥—É –ø—Ä–∏ –≤—Ç—Ä–∞—Ç—ñ —Å–≤—ñ–¥–æ–º–æ—Å—Ç—ñ?', options: ['–ü–æ–ª–∏—Ç–∏ –≤–æ–¥–æ—é', '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–∏—Ö–∞–Ω–Ω—è', '–î–∞—Ç–∏ –≤–æ–¥–∏'], correct: 1 },
    ],
  },
  {
    id: 'fireSafety',
    name: '–ü–æ–∂–µ–∂–Ω–∞ –±–µ–∑–ø–µ–∫–∞',
    category: 'safety',
    color: '#ef4444',
    icon: 'üî•',
    description: '–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –ø—ñ–¥ —á–∞—Å –ø–æ–∂–µ–∂—ñ —Ç–∞ —è–∫ –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–º —Å–∏—Ç—É–∞—Ü—ñ—è–º',
    questionsCount: 8,
    difficulty: '–õ–µ–≥–∫–∏–π',
    time: 12,
    questions: [
      { question: '–©–æ —Ä–æ–±–∏—Ç–∏ –ø—Ä–∏ –ø–æ–∂–µ–∂—ñ?', options: ['–ë—ñ–≥—Ç–∏ –¥–æ –≤–∏—Ö–æ–¥—É', '–í–∏–∫–ª–∏–∫–∞—Ç–∏ 101', '–•–æ–≤–∞—Ç–∏—Å—è —É —à–∞—Ñ—É'], correct: 1 },
      { question: '–Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤–æ–≥–Ω–µ–≥–∞—Å–Ω–∏–∫–æ–º?', options: ['–ù–∞–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ –≤–æ–≥–æ–Ω—å', '–°—Ç—Ä—ñ–ª—è—Ç–∏ —É —Å—Ç–µ–ª—é', '–¢—Ä—è—Å—Ç–∏ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º'], correct: 0 },
    ],
  },
  {
    id: 'cyberSafety',
    name: '–ö—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∞',
    category: 'cyber',
    color: '#3b82f6',
    icon: 'üíª',
    description: '–Ø–∫ –∑–∞—Ö–∏—Å—Ç–∏—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ —Ç–∞ —É–Ω–∏–∫–Ω—É—Ç–∏ —à–∞—Ö—Ä–∞–π—Å—Ç–≤–∞',
    questionsCount: 12,
    difficulty: '–°–∫–ª–∞–¥–Ω–∏–π',
    time: 20,
    questions: [
      { question: '–Ø–∫–∏–π –ø–∞—Ä–æ–ª—å –≤–≤–∞–∂–∞—î—Ç—å—Å—è –±–µ–∑–ø–µ—á–Ω–∏–º?', options: ['123456', 'qwerty', 'J8#kL9$pX2!'], correct: 2 },
      { question: '–©–æ —Ä–æ–±–∏—Ç–∏ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ–≥–æ –ª–∏—Å—Ç–∞?', options: ['–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤–∫–ª–∞–¥–µ–Ω—å', '–ù–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è', '–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ —Å–ø–∞–º'], correct: 2 },
    ],
  },
  {
    id: 'roadSafety',
    name: '–ë–µ–∑–ø–µ–∫–∞ –Ω–∞ –¥–æ—Ä–æ–∑—ñ',
    category: 'safety',
    color: '#f59e0b',
    icon: 'üö∏',
    description: '–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ—á–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –Ω–∞ –¥–æ—Ä–æ–∑—ñ',
    questionsCount: 10,
    difficulty: '–õ–µ–≥–∫–∏–π',
    questions: [
      { question: '–Ø–∫ –±–µ–∑–ø–µ—á–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –¥–æ—Ä–æ–≥—É?', options: ['–ë—ñ–≥—Ç–∏ —á–µ—Ä–µ–∑ –¥–æ—Ä–æ–≥—É', '–¢—ñ–ª—å–∫–∏ –Ω–∞ –∑–µ–ª–µ–Ω–∏–π —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä', '–ú—ñ–∂ –ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞–Ω–∏–º–∏ –∞–≤—Ç–æ'], correct: 1 },
      { question: '–ß–∏ –º–æ–∂–Ω–∞ –≥—Ä–∞—Ç–∏ –±—ñ–ª—è –ø—Ä–æ—ó–∂–¥–∂–æ—ó —á–∞—Å—Ç–∏–Ω–∏?', options: ['–¢–∞–∫', '–ù—ñ', '–Ø–∫—â–æ –Ω—ñ–∫–æ–≥–æ –Ω–µ–º–∞—î'], correct: 1 },
    ],
  },
];
const adjustColor = (color, amount) => {
  return '#' + color.replace(/^#/, '').replace(/../g, 
    color => ('0' + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).substr(-2)
  );
};
const QuizCard = ({ quiz, onStart }) => {
  const getDifficultyInfo = (difficulty) => {
    const difficultyMap = {
      '–ª–µ–≥–∫–∏–π': { class: 'beginner', color: '#10b981' },
      '—Å–µ—Ä–µ–¥–Ω—ñ–π': { class: 'intermediate', color: '#3b82f6' },
      '—Å–∫–ª–∞–¥–Ω–∏–π': { class: 'advanced', color: '#ef4444' }
    };
    return difficultyMap[difficulty.toLowerCase()] || { class: 'beginner', color: '#6b7280' };
  };
  const difficulty = getDifficultyInfo(quiz.difficulty);
  
  return (
    <motion.div
      className="quiz-card"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3, ease: [0.4, 0, 0.2, 1] }}
      whileHover={{ y: -4 }}
    >
      <div className="quiz-card-header">
        <div 
          className="quiz-card-icon"
          style={{ 
            background: `linear-gradient(135deg, ${quiz.color}, ${adjustColor(quiz.color, -20)})`
          }}
        >
          {quiz.icon}
        </div>
        <div className="quiz-card-title-wrapper">
          <h3 className="quiz-card-title">{quiz.name}</h3>
          <span className="quiz-card-category">{quiz.category}</span>
        </div>
      </div>
      
      <div className="quiz-card-body">
        <p className="quiz-card-description">{quiz.description}</p>
        
        <div className="quiz-card-meta">
          <div className="meta-item">
            <FiClock />
            <span>{quiz.time} —Ö–≤</span>
          </div>
          <div className="meta-item">
            <FiAward />
            <span>{quiz.questionsCount} –∑–∞–ø–∏—Ç–∞–Ω—å</span>
          </div>
        </div>
        
        <div className="quiz-card-footer">
          <span className={`quiz-card-difficulty difficulty-${difficulty.class}`}>
            {quiz.difficulty}
          </span>
          <button 
            className="start-quiz-button"
            onClick={(e) => {
              e.stopPropagation();
              onStart(quiz.id);
            }}
            style={{
              background: `linear-gradient(135deg, ${quiz.color}, ${adjustColor(quiz.color, -15)})`
            }}
          >
            –ü–æ—á–∞—Ç–∏
            <FiArrowRight />
          </button>
        </div>
      </div>
    </motion.div>
  );
};
const QuizPage = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredQuizzes, setFilteredQuizzes] = useState(QUIZZES);
  const [activeCategory, setActiveCategory] = useState('all');
  const [isSidebarVisible, setIsSidebarVisible] = useState(true);
  
  const activeTab = location.pathname.split('/')[1] || 'home';
  useEffect(() => {
    let filtered = [...QUIZZES];
    
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      filtered = filtered.filter(quiz => 
        quiz.name.toLowerCase().includes(term) || 
        quiz.description.toLowerCase().includes(term)
      );
    }
    
    if (activeCategory !== 'all') {
      filtered = filtered.filter(quiz => quiz.category === activeCategory);
    }
    
    setFilteredQuizzes(filtered);
  }, [searchTerm, activeCategory]);
  const startQuiz = (quizId) => {
    navigate(`/quiz/${quizId}`);
  };
  const clearFilters = () => {
    setSearchTerm('');
    setActiveCategory('all');
  };
  const toggleSidebar = () => {
    setIsSidebarVisible(!isSidebarVisible);
  };
  return (
    <div className="quiz-page-container">
      {/* Background Gradient */}
      <div className="page-background"></div>
      
      {/* Sidebar Toggle Button */}
      <button 
        className={`sidebar-toggle ${isSidebarVisible ? 'active' : ''}`}
        onClick={toggleSidebar}
        aria-label={isSidebarVisible ? '–°—Ö–æ–≤–∞—Ç–∏ –±—ñ—á–Ω–µ –º–µ–Ω—é' : '–ü–æ–∫–∞–∑–∞—Ç–∏ –±—ñ—á–Ω–µ –º–µ–Ω—é'}
      >
        {isSidebarVisible ? '‚ùÆ' : '‚ùØ'}
      </button>
      {/* Sidebar Navigation */}
      <div className={`flashcards-sidebar ${isSidebarVisible ? '' : 'hidden'}`}>
        <button 
          className={`sidebar-icon ${activeTab === 'dashboard' ? 'active' : ''}`}
          onClick={() => navigate('/dashboard')}
          aria-label="–ì–æ–ª–æ–≤–Ω–∞"
        >
          <FiHome size={20} />
        </button>
        <button 
          className={`sidebar-icon ${activeTab === 'flashcards' ? 'active' : ''}`}
          onClick={() => navigate('/flashcards')}
          aria-label="–§–ª–µ—à-–∫–∞—Ä—Ç–∫–∏"
        >
          <FiBook size={20} />
        </button>
        <button 
          className={`sidebar-icon ${activeTab === 'quiz' ? 'active' : ''}`}
          onClick={() => navigate('/quiz')}
          aria-label="–í—ñ–∫—Ç–æ—Ä–∏–Ω–∏"
        >
          <FiTrendingUp size={20} />
        </button>
        <button 
          className={`sidebar-icon ${activeTab === 'profile' ? 'active' : ''}`}
          onClick={() => navigate('/profile')}
          aria-label="–ü—Ä–æ—Ñ—ñ–ª—å"
        >
          <FiUser size={20} />
        </button>
      </div>
      
      {/* Main Content */}
      <div className="flashcards-main-area">
        <div className="flashcards-container">
          {/* Header */}
          <header className="flashcards-header">
            <div className="header-content">
              <motion.h1 
                className="header-title"
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, ease: [0.4, 0, 0.2, 1] }}
              >
                <span>–í—ñ–∫—Ç–æ—Ä–∏–Ω–∏</span>
              </motion.h1>
            </div>
          </header>
          {/* Search and Filters */}
          <div className="search-filter-container">
            <div className="search-bar">
              <FiSearch className="search-icon" />
              <input
                type="text"
                placeholder="–ó–Ω–∞–π—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                aria-label="–ü–æ—à—É–∫ –≤—ñ–∫—Ç–æ—Ä–∏–Ω"
              />
              {(searchTerm || activeCategory !== 'all') && (
                <button 
                  className="clear-filters-button"
                  onClick={clearFilters}
                  aria-label="–û—á–∏—Å—Ç–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏"
                >
                  <FiX size={18} />
                </button>
              )}
            </div>
            
            <div className="category-filters">
              {CATEGORIES.map(category => (
                <motion.button
                  key={category.id}
                  className={`category-filter ${activeCategory === category.id ? 'active' : ''}`}
                  onClick={() => setActiveCategory(category.id)}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  {activeCategory === category.id && <FiCheck size={16} style={{ marginRight: 6 }} />}
                  {category.name}
                </motion.button>
              ))}
            </div>
          </div>
          {/* Quiz Cards Grid */}
          <div className="flashcard-sets">
            <AnimatePresence>
              {filteredQuizzes.length > 0 ? (
                filteredQuizzes.map((quiz, index) => (
                  <motion.div
                    key={quiz.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.3, delay: index * 0.05 }}
                  >
                    <QuizCard 
                      quiz={quiz}
                      onStart={startQuiz}
                    />
                  </motion.div>
                ))
              ) : (
                <motion.div 
                  className="no-cards-message"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.4 }}
                >
                  <FiAlertCircle size={48} className="mb-6 text-gray-400" />
                  <h3 className="text-xl font-semibold mb-2">–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
                  <p className="text-gray-600 mb-4">–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É</p>
                  <button 
                    className="clear-filters-button"
                    onClick={clearFilters}
                  >
                    <FiX size={16} className="mr-2" /> –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏
                  </button>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </div>
      </div>
    </div>
  );
};
export default QuizPage;
